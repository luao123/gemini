<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd ">


    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean
                    class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"
                    p:supportedMediaTypes="*/*" />
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
    <bean
            class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->
            </list>
        </property>
    </bean>


    <!-- 过滤静态资源访问 -->
    <mvc:resources mapping="/resources/**" location="/resources/" />

    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 自行添加的 -->
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView" />
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常 -->
    <!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        默认编码 <property name="defaultEncoding" value="utf-8" /> 文件大小最大值 <property
        name="maxUploadSize" value="10485760000" /> 内存中的最大值 <property name="maxInMemorySize"
        value="40960" /> resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常 <property name="resolveLazily"
        value="true" /> </bean> -->

    <!--启用最新的注解器、映射器 -->
    <mvc:annotation-driven />
    <context:component-scan base-package="com.gemini.**.dao" />

    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <context:component-scan base-package="com.gemini.web.controller" />


    <!-- service -->
    <context:component-scan base-package="com.gemini.**.service" />
    <!-- mq -->
    <context:component-scan base-package="com.gemini.**.mq" />
    <!-- spi -->
    <context:component-scan base-package="com.gemin.**.spi" />
    <!-- logic -->
    <context:component-scan base-package="com.gemini.**.logic" />
    <!-- info -->
    <context:component-scan base-package="com.gemini.**.service" />

    <!--启动对AspectJ注解的支持，proxy-target-class等于true是强制使用cglib代理 -->
    <aop:aspectj-autoproxy proxy-target-class="true" />
    <context:annotation-config />


</beans>
